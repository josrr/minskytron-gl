(in-package #:shaders)

(defun define-compile-shader (shader-program type code)
  (let ((shader (opengl:create-shader type)))
    (opengl:shader-source shader code)
    (opengl:compile-shader shader)
    (unless (opengl:get-shader shader :compile-status)
      (let ((error-str (opengl:get-shader-info-log shader)))
	(log:error "~S ~S" type error-str)
	(error "~A" (opengl:get-shader-info-log shader))))
    (opengl:attach-shader shader-program shader)
    shader))

(defun define-shaders (shader-program shaders)
  (mapcar (lambda (shader)
	    (define-compile-shader shader-program (car shader)
	      (cadr shader)))
	  shaders))

(defmacro with-shaders ((shader-program shaders) &body body)
  `(let ((,shader-program (opengl:create-program)))
     (define-shaders ,shader-program
         (list ,@(mapcar (lambda (shader)
                           `(list ,(car shader) (list ,(caadr shader))))
                         shaders)))
     (opengl:link-program ,shader-program)
     (opengl:use-program ,shader-program)
     ,@body))

(defmacro compile-shaders (vshader fshader)
  (alexandria:with-gensyms (g-program)
    `(with-shaders (,g-program ((:vertex-shader (,vshader))
                               (:fragment-shader (,fshader))))
       ,g-program)))

(defun read-shader-from-file (path)
  "This function open and read a text file; returns the contents as a string."
  (if (probe-file path)
      (handler-case
	  (with-open-file (archivo path :direction :input)
	    (let ((seq (make-string (file-length archivo))))
	      (read-sequence seq archivo)
	      seq))
	(error (c) (warn "~A" c)))
      (error "the file ~S does not exists" (namestring path))))
